using System.Numerics;
using Content.Client.Parallax; // Frontier: Parallax control for the background
using Content.Client.Research;
using Content.Client.UserInterface.Controls;
using Content.Shared._Goobstation.Research;
using Content.Shared.Access.Systems;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Goobstation.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class FancyResearchConsoleMenu : FancyWindow
{
    public Action<string>? OnTechnologyCardPressed;
    public Action? OnServerButtonPressed;

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly ResearchSystem _research;
    private readonly SpriteSystem _sprite;
    private readonly AccessReaderSystem _accessReader;

    /// <summary>
    /// Console entity
    /// </summary>
    public EntityUid Entity;

    /// <summary>
    /// Currently selected tech
    /// Exists for better UI refreshing
    /// </summary>
    public ProtoId<TechnologyPrototype>? CurrentTech;

    /// <summary>
    /// All technologies and their availability
    /// </summary>
    public Dictionary<string, ResearchAvailability> List = new();

    /// <summary>
    /// Cached research points
    /// </summary>
    public int Points = 0;

    /// <summary>
    /// Is tech currently being dragged
    /// </summary>
    private bool _draggin;

    /// <summary>
    /// Global position that all tech relates to.
    /// For dragging mostly
    /// </summary>
    private Vector2 _position = DefaultPosition;

    /// <summary>
    /// Captures the initial position to use with recenter button
    /// </summary>
    private Vector2 _initialViewPosition;

    /// <summary>
    /// Tracks if first initialization has happened
    /// </summary>
    private bool _firstInitialization = true;

    /// <summary>
    /// Frontier: the distance between elements on the grid.
    /// </summary>
    private const int GridSize = 90;

    /// <summary>
    /// Frontier: technology cards size.
    /// </summary>
    private const int CardSize = 64;

    /// <summary>
    /// Frontier: the distance between elements on the grid.
    /// </summary>
    private static readonly Vector2i DefaultPosition = Vector2i.Zero; //Frontier: 45,250 < 0,0

    private Box2i _bounds = new(DefaultPosition, DefaultPosition);

    private ParallaxControl _parallaxControl; // Frontier: Parallax control for the background

    private float _verticalScrollSpeed = 50; // Frontier: Allow mouse scroll

    public FancyResearchConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _research = _entity.System<ResearchSystem>();
        _sprite = _entity.System<SpriteSystem>();
        _accessReader = _entity.System<AccessReaderSystem>();

        // Frontier: Initialize parallax background
        _parallaxControl = new ParallaxControl
        {
            ParallaxPrototype = "Default",
            HorizontalExpand = true,
            VerticalExpand = true,
        };

        // Add the parallax control to the ResearchesContainer at the beginning (bottom layer)
        ResearchesContainer.AddChild(_parallaxControl);

        // Set the proper rendering order by adjusting positions in the parent's child list
        // Controls with a higher position value are drawn on top (foreground)
        // Make sure the parallax is at the bottom of the z-order (drawn first)
        _parallaxControl.SetPositionInParent(0);

        // The drag container should be in the middle
        DragContainer.SetPositionInParent(1);

        // The recenter button should be at the top of the z-order (drawn last)
        RecenterButton.SetPositionInParent(2);

        ServerButton.OnPressed += _ => OnServerButtonPressed?.Invoke();
        DragContainer.OnKeyBindDown += OnKeybindDown;
        DragContainer.OnKeyBindUp += OnKeybindUp;
        RecenterButton.OnPressed += _ => Recenter();

        // Empty initialization
        UpdatePanels(List);
    }

    public void SetEntity(EntityUid entity)
        => Entity = entity;

    public void UpdatePanels(Dictionary<string, ResearchAvailability> dict)
    {
        DragContainer.RemoveAllChildren();
        List = dict;
        var bounds = new Box2i(); // Frontier
        var boundsSet = false; // Frontier

        // Frontier: generate bounding box, ensure position is within bounds
        foreach (var tech in List)
        {
            var proto = _prototype.Index<TechnologyPrototype>(tech.Key);
            var position = DefaultPosition + (GridSize * proto.Position.X, GridSize * -proto.Position.Y); // Invert Y: higher coordinates are lower on the grid
            if (!boundsSet)
            {
                bounds.BottomLeft = position;
                bounds.TopRight = position;
                boundsSet = true;
            }
            else
            {
                bounds.Left = int.Min(position.X, bounds.Left);
                bounds.Bottom = int.Min(position.Y, bounds.Bottom);
                bounds.Right = int.Max(position.X, bounds.Right);
                bounds.Top = int.Max(position.Y, bounds.Top);
            }
        }

        if (boundsSet)
        {
            _bounds = bounds;

            // First-time initialization
            if (_firstInitialization)
            {
                _position = DefaultPosition;
                ClampPosition(ref _position);

                // Store the initial position for recenter
                _initialViewPosition = _position;
                _firstInitialization = false;
            }
        }

        foreach (var tech in List)
        {
            var proto = _prototype.Index<TechnologyPrototype>(tech.Key);

            var control = new FancyResearchConsoleItem(proto, _sprite, tech.Value);
            DragContainer.AddChild(control);

            // Set position for all tech, relating to _position
            var uiPosition = _position + proto.Position * GridSize;
            LayoutContainer.SetPosition(control, uiPosition);
            control.SelectAction += SelectTech;

            if (tech.Key == CurrentTech)
                SelectTech(proto, tech.Value);
        }
    }

    public void UpdateInformationPanel(int points)
    {
        Points = points;

        var amountMsg = new FormattedMessage();
        amountMsg.AddMarkupOrThrow(Loc.GetString("research-console-menu-research-points-text",
            ("points", points)));
        ResearchAmountLabel.SetMessage(amountMsg);

        if (!_entity.TryGetComponent(Entity, out TechnologyDatabaseComponent? database))
            return;

        TierDisplayContainer.RemoveAllChildren();
        foreach (var disciplineId in database.SupportedDisciplines)
        {
            var discipline = _prototype.Index<TechDisciplinePrototype>(disciplineId);
            var tier = _research.GetTierCompletionPercentage(database, discipline, _prototype);

            // i'm building the small-ass control here to spare me some mild annoyance in making a new file
            var texture = new TextureRect
            {
                TextureScale = new Vector2(2, 2),
                VerticalAlignment = VAlignment.Center
            };
            var label = new RichTextLabel();
            texture.Texture = _sprite.Frame0(discipline.Icon);
            label.SetMessage(Loc.GetString("research-console-tier-percentage", ("perc", tier)));

            var control = new BoxContainer
            {
                Children =
                {
                    texture,
                    label,
                    new Control
                    {
                        MinWidth = 10
                    }
                }
            };
            TierDisplayContainer.AddChild(control);
        }
    }

    #region Drag handle
    protected override void MouseMove(GUIMouseMoveEventArgs args)
    {
        base.MouseMove(args);

        if (!_draggin)
            return;

        // Frontier: bound motion to a box
        var originalPosition = _position;
        _position += args.Relative;

        ClampPosition(ref _position);

        var diff = _position - originalPosition;
        // End Frontier: bound motion to a box

        // Move all tech
        foreach (var child in DragContainer.Children)
        {
            LayoutContainer.SetPosition(child, child.Position + diff); // Frontier: args.Relative<diff
        }
    }

    /// <summary>
    /// Raised when LMB is pressed at <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindDown(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = true;
    }

    /// <summary>
    /// Raised when LMB is unpressed at <see cref="DragContainer"/>
    /// </summary>
    private void OnKeybindUp(GUIBoundKeyEventArgs args)
    {
        if (args.Function == EngineKeyFunctions.Use)
            _draggin = false;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
        => _draggin ? DragMode.None : base.GetDragModeFor(relativeMousePos);
    #endregion

    /// <summary>
    /// Selects a tech prototype and opens info panel
    /// </summary>
    /// <param name="proto">Tech proto</param>
    /// <param name="availability">Tech availability</param>
    public void SelectTech(TechnologyPrototype proto, ResearchAvailability availability)
    {
        InfoContainer.RemoveAllChildren();
        if (!_player.LocalEntity.HasValue)
            return;

        CurrentTech = proto.ID;
        var control = new FancyTechnologyInfoPanel(proto, _accessReader.IsAllowed(_player.LocalEntity.Value, Entity), availability, _sprite);
        control.BuyAction += args => OnTechnologyCardPressed?.Invoke(args.ID);
        InfoContainer.AddChild(control);
    }

    /// <summary>
    /// Resets the view exactly to the initial position when the UI was first opened
    /// </summary>
    public void Recenter()
    {
        // Preserve the current tech items but reset the positions
        var diff = _initialViewPosition - _position;

        // First update the master position
        _position = _initialViewPosition;

        // Now update all child positions by the same delta
        foreach (var child in DragContainer.Children)
        {
            LayoutContainer.SetPosition(child, child.Position + diff);
        }
    }

    public override void Close()
    {
        base.Close();

        DragContainer.RemoveAllChildren();
        InfoContainer.RemoveAllChildren();
        _firstInitialization = true;
    }

    private sealed partial class DisciplineButton(TechDisciplinePrototype proto) : Button
    {
        public TechDisciplinePrototype Proto = proto;
    }

    // Frontier: clamp view bounds
    private void ClampPosition(ref Vector2 position)
    {
        var viewSize = DragContainer.Size;

        var minX = _bounds.Left;
        var maxX = _bounds.Right - viewSize.X - CardSize;
        if (maxX <= minX)
            position.X = minX;
        else
            position.X = Math.Clamp(position.X, minX, maxX);

        var minY = _bounds.Bottom + viewSize.Y - RecenterButton.Height - CardSize; // positive window coords towards the bottom
        var maxY = _bounds.Top;
        if (maxY <= minY)
            position.Y = maxY;
        else
            position.Y = Math.Clamp(position.Y, minY, maxY);
    }

    protected override void MouseWheel(GUIMouseWheelEventArgs args)
    {
        base.MouseWheel(args);

        var originalPosition = _position;
        _position.Y += args.Delta.Y * _verticalScrollSpeed;

        ClampPosition(ref _position);

        var diff = _position - originalPosition;

        // Move all tech
        foreach (var child in DragContainer.Children)
        {
            LayoutContainer.SetPosition(child, child.Position + diff);
        }

        args.Handle();
    }
    // End Frontier: clamp view bounds
}
