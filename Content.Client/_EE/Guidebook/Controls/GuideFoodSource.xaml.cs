using System.Linq;
using Content.Client.Chemistry.EntitySystems;
using Content.Client.Guidebook.Controls;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Content.Shared.Kitchen; // Frontier
using Content.Shared.Nutrition.Components;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._EE.Guidebook.Controls; // Frontier: add _EE

[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideFoodSource : BoxContainer, ISearchableControl
{
    private readonly IPrototypeManager _protoMan;
    private readonly SpriteSystem _sprites = default!;

    public GuideFoodSource(IPrototypeManager protoMan)
    {
        RobustXamlLoader.Load(this);
        _protoMan = protoMan;
        _sprites = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
    }

    public GuideFoodSource(EntityPrototype result, FoodSourceData entry, IPrototypeManager protoMan) : this(protoMan)
    {
        switch (entry)
        {
            case FoodButcheringData butchering:
                GenerateControl(butchering);
                break;
            case FoodSlicingData slicing:
                GenerateControl(slicing);
                break;
            case FoodRecipeData recipe:
                GenerateControl(recipe);
                break;
            case FoodReactionData reaction:
                GenerateControl(reaction);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(entry), entry, null);
        }

        GenerateOutputs(result, entry);
    }

    private void GenerateControl(FoodButcheringData entry)
    {
        if (!_protoMan.TryIndex(entry.Butchered, out var ent))
        {
            SourceLabel.Text = Loc.GetString("guidebook-food-unknown-proto", ("id", entry.Butchered)); // Frontier: SetMessage<Text
            return;
        }

        SetSource(ent);
        ProcessingLabel.Text = Loc.GetString("guidebook-food-processing-butchering");

        var processingTexture = new TextureRect(); // Frontier
        processingTexture.Texture = entry.Type switch
        {
            ButcheringType.Knife => GetRsiTexture("/Textures/Objects/Weapons/Melee/kitchen_knife.rsi", "icon"),
            _ => GetRsiTexture("/Textures/Structures/meat_spike.rsi", "spike")
        };
        ProcessingTextures.AddChild(processingTexture); // Frontier
    }

    private void GenerateControl(FoodSlicingData entry)
    {
        if (!_protoMan.TryIndex(entry.Sliced, out var ent))
        {
            SourceLabel.Text = Loc.GetString("guidebook-food-unknown-proto", ("id", entry.Sliced)); // Frontier: SetMessage<Text
            return;
        }

        SetSource(ent);
        ProcessingLabel.Text = Loc.GetString("guidebook-food-processing-slicing");
        var processingTexture = new TextureRect(); // Frontier
        processingTexture.Texture = GetRsiTexture("/Textures/Objects/Misc/utensils.rsi", "plastic_knife");
        ProcessingTextures.AddChild(processingTexture); // Frontier
    }

    private void GenerateControl(FoodRecipeData entry)
    {
        if (!_protoMan.TryIndex(entry.Recipe, out var recipe))
        {
            SourceLabel.Text = Loc.GetString("guidebook-food-unknown-proto", ("id", entry.Result)); // Frontier: SetMessage<Text
            return;
        }

        var combinedSolids = recipe.IngredientsSolids
            .Select(it => _protoMan.TryIndex<EntityPrototype>(it.Key, out var proto) ? FormatIngredient(proto, it.Value) : "")
            .Where(it => it.Length > 0);
        var combinedLiquids = recipe.IngredientsReagents
            .Select(it => _protoMan.TryIndex<ReagentPrototype>(it.Key, out var proto) ? FormatIngredient(proto, it.Value) : "")
            .Where(it => it.Length > 0);

        var combinedIngredients = string.Join("\n", combinedLiquids.Union(combinedSolids));
        SourceLabel.Text = Loc.GetString("guidebook-food-processing-recipe", ("ingredients", combinedIngredients)); // Frontier: SetMessage<Text

        // Frontier: multiple machine types
        var recipeType = (MicrowaveRecipeType)recipe.RecipeType;
        TextureRect processingTexture;
        List<string> processingTypes = new();
        if (recipeType.HasFlag(MicrowaveRecipeType.Microwave))
        {
            processingTexture = new TextureRect();
            if (recipe.SecretRecipe)
                processingTexture.Texture = GetRsiTexture("/Textures/Structures/Machines/microwave_syndie.rsi", "mw");
            else
                processingTexture.Texture = GetRsiTexture("/Textures/Structures/Machines/microwave.rsi", "mw");
            ProcessingTextures.AddChild(processingTexture);
            processingTypes.Add(Loc.GetString("guidebook-food-processing-type-microwave"));
        }
        if (recipeType.HasFlag(MicrowaveRecipeType.Oven))
        {
            processingTexture = new TextureRect();
            if (recipe.SecretRecipe)
                processingTexture.Texture = GetRsiTexture("/Textures/_NF/Structures/Machines/oven_syndie.rsi", "composite_off");
            else
                processingTexture.Texture = GetRsiTexture("/Textures/_NF/Structures/Machines/oven.rsi", "composite_off");
            ProcessingTextures.AddChild(processingTexture);
            processingTypes.Add(Loc.GetString("guidebook-food-processing-type-oven"));
        }
        if (recipeType.HasFlag(MicrowaveRecipeType.Assembler))
        {
            processingTexture = new TextureRect();
            processingTexture.Texture = GetRsiTexture("/Textures/_NF/Structures/Machines/assembler.rsi", "assembler");
            ProcessingTextures.AddChild(processingTexture);
            processingTypes.Add(Loc.GetString("guidebook-food-processing-type-assembler"));
        }
        if (recipeType.HasFlag(MicrowaveRecipeType.MedicalAssembler))
        {
            processingTexture = new TextureRect();
            processingTexture.Texture = GetRsiTexture("/Textures/_NF/Structures/Machines/medical_assembler.rsi", "mediwave-base");
            ProcessingTextures.AddChild(processingTexture);
            processingTypes.Add(Loc.GetString("guidebook-food-processing-type-medical-assembler"));
        }
        if (processingTypes.Count <= 0)
            processingTypes.Add(Loc.GetString("guidebook-food-processing-type-generic"));
        var processingTypeString = string.Join('/', processingTypes);
        // End Frontier
        ProcessingLabel.Text = Loc.GetString("guidebook-food-processing-cooking", ("processingTypes", processingTypeString), ("time", recipe.CookTime));
    }

    private void GenerateControl(FoodReactionData entry)
    {
        if (!_protoMan.TryIndex(entry.Reaction, out var reaction))
        {
            SourceLabel.Text = Loc.GetString("guidebook-food-unknown-proto", ("id", entry.Reaction)); // Frontier: SetMessage<Text
            return;
        }

        var combinedReagents = reaction.Reactants
            .Select(it => _protoMan.TryIndex<ReagentPrototype>(it.Key, out var proto) ? FormatIngredient(proto, it.Value.Amount) : "")
            .Where(it => it.Length > 0);

        SourceLabel.Text = Loc.GetString("guidebook-food-processing-recipe", ("ingredients", string.Join("\n", combinedReagents))); // Frontier: SetMessage<Text
        var processingTexture = new TextureRect(); // Frontier
        processingTexture.TexturePath = "/Textures/Interface/Misc/beakerlarge.png";
        ProcessingTextures.AddChild(processingTexture); // Frontier
        ProcessingLabel.Text = Loc.GetString("guidebook-food-processing-reaction");
    }

    private Texture GetRsiTexture(string path, string state)
    {
        return _sprites.Frame0(new SpriteSpecifier.Rsi(new ResPath(path), state));
    }

    private void GenerateOutputs(EntityPrototype result, FoodSourceData entry)
    {
        OutputsLabel.Text = Loc.GetString("guidebook-food-output", ("name", result.Name), ("number", entry.OutputCount));
        OutputsTexture.Texture = _sprites.Frame0(result);
    }

    private void SetSource(EntityPrototype ent)
    {
        SourceLabel.Text = Loc.GetString("guidebook-food-sources-ent-wrapper", ("name", ent.Name)); // Frontier SetMessage<.Text, add Loc.GetString for "guidebook-food-sources-ent-wrapper"
        OutputsTexture.Texture = _sprites.Frame0(ent);
    }

    private string FormatIngredient(EntityPrototype proto, FixedPoint2 amount)
    {
        return Loc.GetString("guidebook-food-ingredient-solid", ("name", proto.Name), ("amount", amount));
    }

    private string FormatIngredient(ReagentPrototype proto, FixedPoint2 amount)
    {
        return Loc.GetString("guidebook-food-ingredient-liquid", ("name", proto.LocalizedName), ("amount", amount));
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        Visible = CheckMatchesSearch(query) ? state : !state;
    }
}
