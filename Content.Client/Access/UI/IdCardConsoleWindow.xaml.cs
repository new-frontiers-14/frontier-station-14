using System.Linq;
using Content.Shared.Access;
using Content.Shared.Access.Components;
using Content.Shared.Access.Systems;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Content.Shared.Access.Components.IdCardConsoleComponent;

namespace Content.Client.Access.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class IdCardConsoleWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly ILogManager _logManager = default!;
        private readonly ISawmill _logMill = default!;

        private readonly IdCardConsoleBoundUserInterface _owner;

        private readonly Dictionary<string, Button> _accessButtons = new();
        private readonly List<string> _jobPrototypeIds = new();

        private string? _lastFullName;
        private string? _lastJobTitle;
        private string? _lastShuttleName;
        private string? _lastJobProto;

        public IdCardConsoleWindow(IdCardConsoleBoundUserInterface owner, IPrototypeManager prototypeManager,
            List<ProtoId<AccessLevelPrototype>> accessLevels)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _logMill = _logManager.GetSawmill(SharedIdCardConsoleSystem.Sawmill);

            _owner = owner;

            FullNameLineEdit.OnTextEntered += _ => SubmitData();
            FullNameLineEdit.OnTextChanged += _ =>
            {
                FullNameSaveButton.Disabled = FullNameSaveButton.Text == _lastFullName;
            };
            FullNameSaveButton.OnPressed += _ => SubmitData();

            JobTitleLineEdit.OnTextEntered += _ => SubmitData();
            JobTitleLineEdit.OnTextChanged += _ =>
            {
                JobTitleSaveButton.Disabled = JobTitleLineEdit.Text == _lastJobTitle;
            };
            JobTitleSaveButton.OnPressed += _ => SubmitData();

            ShipPrefixLineEdit.OnTextChanged += _ => EnsureValidShuttleName();
            ShipNameLineEdit.OnTextChanged += _ => EnsureValidShuttleName();
            ShipSuffixLineEdit.OnTextChanged += _ => EnsureValidShuttleName();
            ShipNameSaveButton.OnPressed += _ => SubmitShuttleData();

            var jobs = _prototypeManager.EnumeratePrototypes<JobPrototype>().ToList();
            jobs.Sort((x, y) => string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCulture));

            foreach (var job in jobs)
            {
                if (!job.SetPreference)
                {
                    continue;
                }

                _jobPrototypeIds.Add(job.ID);
                JobPresetOptionButton.AddItem(Loc.GetString(job.Name), _jobPrototypeIds.Count - 1);
            }

            JobPresetOptionButton.OnItemSelected += SelectJobPreset;

            foreach (var access in accessLevels)
            {
                if (!prototypeManager.TryIndex<AccessLevelPrototype>(access, out var accessLevel))
                {
                    _logMill.Error($"Unable to find accesslevel for {access}");
                    continue;
                }

                var newButton = new Button
                {
                    Text = GetAccessLevelName(accessLevel),
                    ToggleMode = true,
                };
                AccessLevelGrid.AddChild(newButton);
                _accessButtons.Add(accessLevel.ID, newButton);
                newButton.OnPressed += _ => SubmitData();
            }
        }

        private static string GetAccessLevelName(AccessLevelPrototype prototype)
        {
            if (prototype.Name is { } name)
                return Loc.GetString(name);

            return prototype.ID;
        }

        private void ClearAllAccess()
        {
            foreach (var button in _accessButtons.Values)
            {
                if (button.Pressed)
                {
                    button.Pressed = false;
                }
            }
        }

        private void SelectJobPreset(OptionButton.ItemSelectedEventArgs args)
        {
            if (!_prototypeManager.TryIndex(_jobPrototypeIds[args.Id], out JobPrototype? job))
            {
                return;
            }

            JobTitleLineEdit.Text = Loc.GetString(job.Name);
            args.Button.SelectId(args.Id);

            ClearAllAccess();

            // this is a sussy way to do this
            foreach (var access in job.Access)
            {
                if (_accessButtons.TryGetValue(access, out var button) && !button.Disabled)
                {
                    button.Pressed = true;
                }
            }

            foreach (var group in job.AccessGroups)
            {
                if (!_prototypeManager.TryIndex(group, out AccessGroupPrototype? groupPrototype))
                {
                    continue;
                }

                foreach (var access in groupPrototype.Tags)
                {
                    if (_accessButtons.TryGetValue(access, out var button) && !button.Disabled)
                    {
                        button.Pressed = true;
                    }
                }
            }

            SubmitData();
        }

        public void UpdateState(IdCardConsoleBoundUserInterfaceState state)
        {
            PrivilegedIdButton.Text = state.IsPrivilegedIdPresent
                ? Loc.GetString("id-card-console-window-eject-button")
                : Loc.GetString("id-card-console-window-insert-button");

            PrivilegedIdLabel.Text = state.PrivilegedIdName;

            TargetIdButton.Text = state.IsTargetIdPresent
                ? Loc.GetString("id-card-console-window-eject-button")
                : Loc.GetString("id-card-console-window-insert-button");

            TargetIdLabel.Text = state.TargetIdName;

            var interfaceEnabled =
                state.IsPrivilegedIdPresent && state.IsPrivilegedIdAuthorized && state.IsTargetIdPresent;

            var fullNameDirty = _lastFullName != null && FullNameLineEdit.Text != state.TargetIdFullName;
            var jobTitleDirty = _lastJobTitle != null && JobTitleLineEdit.Text != state.TargetIdJobTitle;
            var shuttleNameDirty = _lastShuttleName != null && ShipNameLineEdit.Text != state.TargetShuttleName;

            FullNameLabel.Modulate = interfaceEnabled ? Color.White : Color.Gray;
            FullNameLineEdit.Editable = interfaceEnabled;
            if (!fullNameDirty)
            {
                FullNameLineEdit.Text = state.TargetIdFullName ?? string.Empty;
            }

            FullNameSaveButton.Disabled = !interfaceEnabled || !fullNameDirty;

            JobTitleLabel.Modulate = interfaceEnabled ? Color.White : Color.Gray;
            JobTitleLineEdit.Editable = interfaceEnabled;
            if (!jobTitleDirty)
            {
                JobTitleLineEdit.Text = state.TargetIdJobTitle ?? string.Empty;
            }

            JobTitleSaveButton.Disabled = !interfaceEnabled || !jobTitleDirty;

            // Frontier - shuttle renaming support
            ShipNameLabel.Modulate = interfaceEnabled ? Color.White : Color.Gray;

            ShipNameLineEdit.Editable = ShipPrefixLineEdit.Editable = interfaceEnabled && state.HasOwnedShuttle;
            ShipSuffixLineEdit.Editable = false; // "Make sure you cannot change the suffix at all." - @dvir001, 2023.11.16

            if (interfaceEnabled && state.HasOwnedShuttle)
            {
                // Split shuttle name into 3 parts. The suffix and the prefix must contain no spaces as per convention.
                // Stations cannot be renamed through this ui and thus remain unaffected.
                // If the shuttle has only 1 name parts, it's the name. If 2, it's the prefix+name.
                var shuttleName = state.TargetShuttleName ?? String.Empty;
                var shuttleNameParts = shuttleName.Split(" ");
                var prefix = shuttleNameParts.Length > 1 ? shuttleNameParts.FirstOrDefault("") : "";
                var suffix = shuttleNameParts.Length > 2 ? shuttleNameParts.LastOrDefault("") : "";
                var rest = prefix.Length + suffix.Length < shuttleName.Length && shuttleNameParts.Length > 2
                    ? shuttleName.Substring(prefix.Length + suffix.Length).Trim()
                    : String.Empty;

                ShipPrefixLineEdit.Text = !interfaceEnabled ? String.Empty : prefix;
                ShipSuffixLineEdit.Text = !interfaceEnabled ? String.Empty : suffix;
                ShipNameLineEdit.Text = rest;

                ShipNameSaveButton.Disabled = !interfaceEnabled || !state.HasOwnedShuttle || !shuttleNameDirty;
            }
            else
            {
                ShipPrefixLineEdit.Text = ShipSuffixLineEdit.Text = String.Empty;
                ShipNameLineEdit.Text = state.HasOwnedShuttle
                    ? Loc.GetString("id-card-console-window-shuttle-placeholder")
                    : String.Empty;
            }

            JobPresetOptionButton.Disabled = !interfaceEnabled;

            foreach (var (accessName, button) in _accessButtons)
            {
                button.Disabled = !interfaceEnabled;
                if (interfaceEnabled)
                {
                    button.Pressed = state.TargetIdAccessList?.Contains(accessName) ?? false;
                    button.Disabled = (!state.AllowedModifyAccessList?.Contains(accessName)) ?? true;
                }
            }

            var jobIndex = _jobPrototypeIds.IndexOf(state.TargetIdJobPrototype);
            if (jobIndex >= 0)
            {
                JobPresetOptionButton.SelectId(jobIndex);
            }

            _lastFullName = state.TargetIdFullName;
            _lastJobTitle = state.TargetIdJobTitle;
            _lastJobProto = state.TargetIdJobPrototype;
            _lastShuttleName = state.TargetShuttleName;
        }

        // <summary>
        // Invoked when a shuttle name field is edited.
        // Checks whether the name is valid and, if it is, enabled the save button.
        //
        // The form of a valid name is: "<CORP> <NAME> <SUFFIX>"
        // Where <CORP> is usually a 2-5 character string like NT14, KC, SL;
        // <NAME> is the shuttle name like Construct;
        // and <SUFFIX> is an immutable ID like QT-225.
        // </summary>
        private void EnsureValidShuttleName()
        {
            // We skip suffix validation because it's immutable and is not sent
            var prefix = ShipPrefixLineEdit.Text;
            var name = ShipNameLineEdit.Text;
            var valid = prefix.Length <= MaxShuttlePrefixLength
                && name.Length <= MaxShuttleNameLength
                && name.Trim().Length > 3 // Arbitrary number, should hopefully be long enough.
                && !prefix.Contains(" ");

            ShipNameSaveButton.Disabled = !valid;
        }

        private void SubmitData()
        {
            // Don't send this if it isn't dirty.
            var jobProtoDirty = _lastJobProto != null &&
                                _jobPrototypeIds[JobPresetOptionButton.SelectedId] != _lastJobProto;

            _owner.SubmitData(
                FullNameLineEdit.Text,
                JobTitleLineEdit.Text,
                // Iterate over the buttons dictionary, filter by `Pressed`, only get key from the key/value pair
                _accessButtons.Where(x => x.Value.Pressed).Select(x => x.Key).ToList(),
                jobProtoDirty ? _jobPrototypeIds[JobPresetOptionButton.SelectedId] : string.Empty);
        }

        private void SubmitShuttleData()
        {
            _owner.SubmitShipData(
                ShipPrefixLineEdit.Text,
                ShipNameLineEdit.Text,
                ShipSuffixLineEdit.Text);
        }
    }
}
