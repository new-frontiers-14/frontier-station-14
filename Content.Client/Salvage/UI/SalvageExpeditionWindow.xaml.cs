using System.Linq;
using Content.Client.Computer;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.Parallax.Biomes;
using Content.Shared.Procedural;
using Content.Shared.Salvage;
using Content.Shared.Salvage.Expeditions;
using Content.Shared.Salvage.Expeditions.Modifiers;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Salvage.UI;

[GenerateTypedNameReferences]
public sealed partial class SalvageExpeditionWindow : FancyWindow,
    IComputerWindow<EmergencyConsoleBoundUserInterfaceState>
{
    private readonly IConfigurationManager _cfgManager;
    private readonly IGameTiming _timing;
    private readonly IPrototypeManager _prototype;
    private readonly SharedSalvageSystem _salvage;

    public event Action<ushort>? ClaimMission;
    private bool _claimed;
    private bool _cooldown;
    private TimeSpan _nextOffer;

    public SalvageExpeditionWindow()
    {
        RobustXamlLoader.Load(this);
        _cfgManager = IoCManager.Resolve<IConfigurationManager>();
        _timing = IoCManager.Resolve<IGameTiming>();
        _prototype = IoCManager.Resolve<IPrototypeManager>();
        _salvage = IoCManager.Resolve<IEntityManager>().EntitySysManager.GetEntitySystem<SharedSalvageSystem>();
    }

    public void UpdateState(SalvageExpeditionConsoleState state)
    {
        _claimed = state.Claimed;
        _cooldown = state.Cooldown;
        _nextOffer = state.NextOffer;
        Container.DisposeAllChildren();

        for (var i = 0; i < state.Missions.Count; i++)
        {
            var missionParams = state.Missions[i];
            var difficultyId = "Moderate";
            var difficultyProto = _prototype.Index<SalvageDifficultyPrototype>(difficultyId);
            // TODO: Selectable difficulty soon.
            var mission = _salvage.GetMission(difficultyProto, missionParams.Seed);

            // Mission title
            var missionStripe = new StripeBack()
            {
                Margin = new Thickness(0f, -5f, 0f, 0f)
            };

            missionStripe.AddChild(new Label()
            {
                Text = Loc.GetString($"salvage-expedition-type"),
                HorizontalAlignment = HAlignment.Center,
                Margin = new Thickness(0f, 5f, 0f, 5f),
            });

            var lBox = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };

            // Difficulty
            // Details
            lBox.AddChild(new Label()
            {
                Text = Loc.GetString("salvage-expedition-window-difficulty")
            });

            var difficultyColor = difficultyProto.Color;

            lBox.AddChild(new Label
            {
                Text = Loc.GetString("salvage-expedition-difficulty-Moderate"),
                FontColorOverride = difficultyColor,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            lBox.AddChild(new Label
            {
                Text = Loc.GetString("salvage-expedition-difficulty-players"),
                HorizontalAlignment = HAlignment.Left,
            });

            lBox.AddChild(new Label
            {
                Text = difficultyProto.RecommendedPlayers.ToString(),
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Details
            lBox.AddChild(new Label
            {
                Text = Loc.GetString("salvage-expedition-window-hostiles")
            });

            var faction = mission.Faction;

            lBox.AddChild(new Label
            {
                Text = faction,
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Duration
            lBox.AddChild(new Label
            {
                Text = Loc.GetString("salvage-expedition-window-duration")
            });

            lBox.AddChild(new Label
            {
                Text = mission.Duration.ToString(),
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Biome
            lBox.AddChild(new Label
            {
                Text = Loc.GetString("salvage-expedition-window-biome")
            });

            var biome = mission.Biome;

            lBox.AddChild(new Label
            {
                Text = Loc.GetString(_prototype.Index<SalvageBiomeModPrototype>(biome).ID),
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Modifiers
            lBox.AddChild(new Label
            {
                Text = Loc.GetString("salvage-expedition-window-modifiers")
            });

            var mods = mission.Modifiers;

            lBox.AddChild(new Label
            {
                Text = string.Join("\n", mods.Select(o => "- " + o)).TrimEnd(),
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Claim
            var claimButton = new Button()
            {
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Bottom,
                Pressed = state.ActiveMission == missionParams.Index,
                ToggleMode = true,
                Disabled = state.Claimed || state.Cooldown,
            };

            claimButton.Label.Margin = new Thickness(0f, 5f);

            claimButton.OnPressed += args =>
            {
                ClaimMission?.Invoke(missionParams.Index);
            };

            if (state.ActiveMission == missionParams.Index)
            {
                claimButton.Text = Loc.GetString("salvage-expedition-window-claimed");
                claimButton.AddStyleClass(StyleBase.ButtonCaution);
            }
            else
            {
                claimButton.Text = Loc.GetString("salvage-expedition-window-claim");
            }

            var box = new PanelContainer
            {
                PanelOverride = new StyleBoxFlat(new Color(30, 30, 34)),
                HorizontalExpand = true,
                Margin = new Thickness(5f, 0f),
                Children =
                {
                    new BoxContainer
                    {
                        Orientation = BoxContainer.LayoutOrientation.Vertical,
                        Children =
                        {
                            missionStripe,
                            lBox,
                            new Control() {VerticalExpand = true},
                            claimButton,
                        },
                        Margin = new Thickness(5f, 5f)
                    }
                }
            };

            LayoutContainer.SetAnchorPreset(box, LayoutContainer.LayoutPreset.Wide);

            Container.AddChild(box);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_claimed)
        {
            NextOfferBar.Value = 0f;
            NextOfferText.Text = "00:00";
            return;
        }

        var remaining = _nextOffer - _timing.CurTime;

        if (remaining < TimeSpan.Zero)
        {
            NextOfferBar.Value = 1f;
            NextOfferText.Text = "00:00";
        }
        else
        {
            var cooldown = _cooldown
                ? TimeSpan.FromSeconds(_cfgManager.GetCVar(CCVars.SalvageExpeditionCooldown))
                : TimeSpan.FromSeconds(_cfgManager.GetCVar(CCVars.SalvageExpeditionCooldown));

            NextOfferBar.Value = 1f - (float) (remaining / cooldown);
            NextOfferText.Text = $"{remaining.Minutes:00}:{remaining.Seconds:00}";
        }
    }
}
