using System.Linq;
using Content.Client.GameTicking.Managers;
using Content.Client.UserInterface.Controls;
using Content.Shared.GameTicking;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NF.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class PickerWindow : FancyWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private readonly ClientGameTicker _gameTicker;

    public enum PickerType
    {
        Crew,
        Station,
    }

    private PickerType _currentTab;
    private readonly CrewPickerControl _crewPickerControl = new();
    private readonly StationPickerControl _stationPickerControl = new();

    /**
     * Default constructors without arguments are mandatory for RobustXamlLoader
     */
    public PickerWindow() : this(PickerType.Station) { }

    public PickerWindow(PickerType currentTab)
    {
        _currentTab = currentTab;
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
        _gameTicker.LobbyJobsAvailableUpdated += UpdateUi;

        CrewTabButton.OnPressed += _ =>
        {
            _currentTab = PickerType.Crew;
        };

        StationTabButton.OnPressed += _ =>
        {
            _currentTab = PickerType.Station;
        };

        UpdateUi(_gameTicker.StationJobInformationList);
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();
        _gameTicker.LobbyJobsAvailableUpdated -= UpdateUi;
    }

    private void UpdateUi(IReadOnlyDictionary<NetEntity, StationJobInformation> obj)
    {
        // This is the place where it filters out cargo stations and others that shouldn't be shown in the latejoin ui.
        var availableJobs = obj.Where(kvp => kvp.Value.JobsAvailable.Values.Count != 0)
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        ContentContainer.RemoveAllChildren();
        CrewTabButton.Disabled = !StationJobInformationExtensions.IsAnyCrewJobAvailable(availableJobs) || _currentTab == PickerType.Crew;
        StationTabButton.Disabled = !StationJobInformationExtensions.IsAnyStationAvailable(availableJobs) || _currentTab == PickerType.Station;
        switch (_currentTab)
        {
            case PickerType.Crew:
                ContentContainer.AddChild(_crewPickerControl);
                break;
            case PickerType.Station:
                ContentContainer.AddChild(_stationPickerControl);
                _stationPickerControl.UpdateUi(availableJobs);
                break;
            default:
                throw new ArgumentOutOfRangeException(); // This will never happen. Trust.
        }
    }
}
