using System.Linq;
using Content.Client.GameTicking.Managers;
using Content.Client.UserInterface.Controls;
using Content.Shared.GameTicking;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NF.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class StationOrCrewPickerWindow : FancyWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private readonly ClientGameTicker _gameTicker;

    public StationOrCrewPickerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
        _gameTicker.LobbyJobsAvailableUpdated += UpdateUi;

        StationButton.OnPressed += StationButtonOnOnPressed;
        CrewButton.OnPressed += CrewButtonOnOnPressed;
        UpdateUi(_gameTicker.StationJobInformationList);
    }

    private void UpdateUi(IReadOnlyDictionary<NetEntity, StationJobInformation> obj)
    {
        StationButton.Disabled = !StationJobInformationExtensions.IsAnyStationAvailable(obj);
        NoStationsAvailableLabel.Visible = !StationJobInformationExtensions.IsAnyStationAvailable(obj);
        CrewButton.Disabled = !StationJobInformationExtensions.IsAnyCrewJobAvailable(obj);
        NoCrewsAvailableLabel.Visible = !StationJobInformationExtensions.IsAnyCrewJobAvailable(obj);
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();
        _gameTicker.LobbyJobsAvailableUpdated -= UpdateUi;
    }

    private void StationButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        new PickerWindow(PickerWindow.PickerType.Station).OpenCentered();
        Close();
    }

    private void CrewButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        new PickerWindow(PickerWindow.PickerType.Crew).OpenCentered();
        Close();
    }
}
