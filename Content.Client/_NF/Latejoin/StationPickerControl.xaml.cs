using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Console;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._NF.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class StationPickerControl : PanelContainer
{
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConsoleHost _consoleHost = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly ISawmill _sawmill;

    public sealed class StationItemViewState(
        string stationName,
        string stationSubtext,
        string stationDescription,
        NetEntity stationEntity,
        bool selected,
        string? iconPath)
    {
        public string StationName { get; } = stationName;
        public string StationSubtext { get; } = stationSubtext;
        public string StationDescription { get; } = stationDescription;
        public NetEntity StationEntity { get; } = stationEntity;

        public bool Selected { get; set; } = selected;

        public string IconPath { get; } = iconPath ?? "";
    }

    public sealed class StationJobItemViewState(string jobId, string jobName, bool disabled, Texture? jobIcon)
    {
        public string JobId { get; } = jobId;
        public string JobName { get; } = jobName;

        public bool Disabled { get; } = disabled;

        public Texture? JobIcon { get; } = jobIcon;
    }

    public StationPickerControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();
        _sawmill = Logger.GetSawmill("latejoin");
    }

    private Dictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> _lobbyJobs = new();
    private Dictionary<NetEntity, string> _stationNames = new();
    private Dictionary<NetEntity, LocId> _stationSubtexts = new();
    private Dictionary<NetEntity, LocId> _stationDescriptions = new();
    private Dictionary<NetEntity, ResPath> _stationIcons = new();
    private StationItemViewState? _lastSelectedStation = null;

    public void UpdateUi(IReadOnlyDictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> obj,
        Dictionary<NetEntity, string> stationNames,
        Dictionary<NetEntity, LocId> stationSubtexts,
        Dictionary<NetEntity, LocId> stationDescriptions,
        Dictionary<NetEntity, ResPath> stationIcons)
    {
        // Build station names, the left section of the screen.
        _lobbyJobs = new Dictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>>(obj);
        _stationNames = new Dictionary<NetEntity, string>(stationNames);
        _stationSubtexts = new Dictionary<NetEntity, LocId>(stationSubtexts);
        _stationDescriptions = new Dictionary<NetEntity, LocId>(stationDescriptions);
        _stationIcons = new Dictionary<NetEntity, ResPath>(stationIcons);
        StationItemList.RemoveAllChildren();

        foreach (var stationViewState in BuildStationViewStateList(obj, stationNames))
        {
            var item = new StationPickerListItem(stationViewState);
            item.StationButton.OnPressed += _ => OnStationPressed(stationViewState);
            StationItemList.AddChild(item);
        }

        // Build station jobs, the right section of the screen.
        StationJobItemList.RemoveAllChildren();
        foreach (var jobViewState in BuildStationJobViewStateList(obj[_lastSelectedStation?.StationEntity ?? NetEntity.Invalid]))
        {
            var item = new StationJobListItem(jobViewState);
            item.OnPressed += _ =>
            {
                _sawmill.Info($"Late joining as ID: {jobViewState.JobId}");
                _consoleHost.ExecuteCommand($"joingame {CommandParsing.Escape(jobViewState.JobId)} {_lastSelectedStation?.StationEntity}");
                ExitedTree();
            };
            StationJobItemList.AddChild(item);
        }

        StationName.Text = _lastSelectedStation?.StationName ?? "";
        StationSubtext.Text = _lastSelectedStation?.StationSubtext ?? "";
    }

    private void OnStationPressed(StationItemViewState stationItemViewState)
    {
        _lastSelectedStation = stationItemViewState;
        UpdateUi(_lobbyJobs, _stationNames, _stationSubtexts, _stationDescriptions, _stationIcons);
    }

    private List<StationJobItemViewState> BuildStationJobViewStateList(Dictionary<ProtoId<JobPrototype>, int?> obj)
    {
        var viewStateList = new List<StationJobItemViewState>();

        foreach (var entry in obj)
        {
            var prototype = _prototypeManager.Index(entry.Key);
            var jobCount = entry.Value;
            var jobName = $"{prototype.LocalizedName} ({jobCount?.ToString() ?? "Unlimited"})";
            Texture? texture = null;

            if (_prototypeManager.TryIndex(prototype.Icon, out var jobIcon))
            {
                texture = _spriteSystem.Frame0(jobIcon.Icon);
            }

            var viewState = new StationJobItemViewState(entry.Key, jobName, jobCount == 0, texture);
            viewStateList.Add(viewState);
        }

        return viewStateList;
    }

    /**
     * Convert some raw dictionary data to a view state model that is more readable.
     *
     * @param obj Dictionary of station entities to job prototypes.
     * @param stationNames Dictionary of station entities to station names.
     * @return List of view states for each station.
     */
    private List<StationItemViewState> BuildStationViewStateList(
        IReadOnlyDictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> obj,
        Dictionary<NetEntity, string> stationNames)
    {
        var viewStateList = new List<StationItemViewState>();

        foreach (var (stationEntity, _) in obj)
        {
            var stationName = stationNames[stationEntity];
            var stationSubtext = "";
            var stationDescription = "";
            if (_stationSubtexts.TryGetValue(stationEntity, out var locId))
            {
                stationSubtext = _loc.GetString(locId.Id);
            }

            var iconPath = _stationIcons.TryGetValue(stationEntity, out var resPath) ? resPath.CanonPath : null;
            var viewState = new StationItemViewState(
                stationName,
                stationSubtext,
                stationDescription,
                stationEntity,
                _lastSelectedStation?.StationEntity == stationEntity,
                iconPath
            );

            // Always select the first station in the list if none is selected yet.
            // This is because otherwise the right side of the screen would then be a blank space.
            if (_lastSelectedStation == null)
            {
                _lastSelectedStation = viewState;
                viewState.Selected = true;
            }
            viewStateList.Add(viewState);
        }

        return viewStateList;
    }
}
