using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._NF.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class StationPickerControl : PanelContainer
{
    [Dependency] private readonly ILocalizationManager _loc = default!;

    public sealed class StationItemViewState
    {
        public string StationName { get; set; }
        public string StationSubtext { get; set; }
        public NetEntity StationEntity { get; set; }

        public bool Selected { get; set; }

        public string IconPath { get; set; }

        public StationItemViewState(string stationName, string stationSubtext, NetEntity stationEntity, bool selected, string? iconPath)
        {
            StationName = stationName;
            StationSubtext = stationSubtext;
            StationEntity = stationEntity;
            Selected = selected;
            IconPath = iconPath ?? "";
        }
    }

    public StationPickerControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    private Dictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> _lobbyJobs = new();
    private Dictionary<NetEntity, string> _stationNames = new();
    private Dictionary<NetEntity, LocId> _stationSubtexts = new();
    private Dictionary<NetEntity, ResPath> _stationIcons = new();
    private StationItemViewState? _lastSelectedStation = null;

    public void UpdateUi(IReadOnlyDictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> obj,
        Dictionary<NetEntity, string> stationNames,
        Dictionary<NetEntity, LocId> stationSubtexts,
        Dictionary<NetEntity, ResPath> stationIcons)
    {
        _lobbyJobs = new Dictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>>(obj);
        _stationNames = new Dictionary<NetEntity, string>(stationNames);
        _stationSubtexts = new Dictionary<NetEntity, LocId>(stationSubtexts);
        _stationIcons = new Dictionary<NetEntity, ResPath>(stationIcons);
        StationItemList.RemoveAllChildren();

        foreach (var stationViewState in BuildViewStateList(obj, stationNames))
        {
            var item = new StationPickerListItem(stationViewState);
            item.StationButton.OnPressed += _ => OnStationPressed(stationViewState);
            StationItemList.AddChild(item);
        }
    }

    private void OnStationPressed(StationItemViewState stationItemViewState)
    {
        _lastSelectedStation = stationItemViewState;
        UpdateUi(_lobbyJobs, _stationNames, _stationSubtexts, _stationIcons);
    }

    /**
     * Convert some raw dictionary data to a view state model that is more readable.
     *
     * @param obj Dictionary of station entities to job prototypes.
     * @param stationNames Dictionary of station entities to station names.
     * @return List of view states for each station.
     */
    private List<StationItemViewState> BuildViewStateList(
        IReadOnlyDictionary<NetEntity, Dictionary<ProtoId<JobPrototype>, int?>> obj,
        Dictionary<NetEntity, string> stationNames)
    {
        var viewStateList = new List<StationItemViewState>();

        foreach (var entry in obj)
        {
            var stationEntity = entry.Key;
            var stationName = stationNames[stationEntity];
            var stationSubtext = "";
            if (_stationSubtexts.TryGetValue(stationEntity, out var locId))
            {
                stationSubtext = _loc.GetString(locId.Id);
            }

            var iconPath = _stationIcons.TryGetValue(stationEntity, out var resPath) ? resPath.CanonPath : null;
            var viewState = new StationItemViewState(
                stationName,
                stationSubtext,
                stationEntity,
                _lastSelectedStation?.StationEntity == entry.Key,
                iconPath
            );

            // Always select the first station in the list if none is selected yet.
            // This is because otherwise the right side of the screen would then be a blank space.
            if (_lastSelectedStation == null)
            {
                _lastSelectedStation = viewState;
                viewState.Selected = true;
            }
            viewStateList.Add(viewState);
        }

        return viewStateList;
    }
}
