using System.Linq;
using Content.Shared.GameTicking;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Console;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._NF.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class StationPickerControl : PanelContainer
{
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConsoleHost _consoleHost = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly ISawmill _sawmill;

    public sealed class StationItemViewState(
        NetEntity stationEntity,
        string stationName,
        string stationSubtext,
        string stationDescription,
        bool selected,
        string? iconPath)
    {
        public string StationName { get; } = stationName;
        public string StationSubtext { get; } = stationSubtext;
        public string StationDescription { get; } = stationDescription;
        public NetEntity StationEntity { get; } = stationEntity;

        public bool Selected { get; set; } = selected;

        public string IconPath { get; } = iconPath ?? "";
    }

    public sealed class StationJobItemViewState(string jobId, string jobName, bool disabled, Texture? jobIcon)
    {
        public string JobId { get; } = jobId;
        public string JobName { get; } = jobName;

        public bool Disabled { get; } = disabled;

        public Texture? JobIcon { get; } = jobIcon;
    }

    public StationPickerControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();
        _sawmill = Logger.GetSawmill("latejoin");
    }

    private Dictionary<NetEntity, StationJobInformation> _lobbyJobs = new();
    private StationItemViewState? _lastSelectedStation;

    public void UpdateUi(IReadOnlyDictionary<NetEntity, StationJobInformation> obj)
    {
        _lobbyJobs = new Dictionary<NetEntity, StationJobInformation>(obj);
        StationItemList.RemoveAllChildren();

        foreach (var stationViewState in BuildStationViewStateList(_lobbyJobs))
        {
            var item = new StationPickerListItem(stationViewState);
            item.StationButton.OnPressed += _ => OnStationPressed(stationViewState);
            StationItemList.AddChild(item);
        }

        // Build station jobs, the right section of the screen.
        StationJobItemList.RemoveAllChildren();
        foreach (var jobViewState in BuildStationJobViewStateList(obj[_lastSelectedStation!.StationEntity]))
        {
            var item = new StationJobListItem(jobViewState);
            item.OnPressed += _ =>
            {
                _sawmill.Info($"Late joining as ID: {jobViewState.JobId}");
                _consoleHost.ExecuteCommand(
                    $"joingame {CommandParsing.Escape(jobViewState.JobId)} {_lastSelectedStation?.StationEntity}");
                ExitedTree();
            };
            StationJobItemList.AddChild(item);
        }

        StationName.Text = _lastSelectedStation?.StationName ?? "";
        StationDescription.Text = _lastSelectedStation?.StationDescription ?? "";
    }

    private void OnStationPressed(StationItemViewState stationItemViewState)
    {
        _lastSelectedStation = stationItemViewState;
        UpdateUi(_lobbyJobs);
    }

    private List<StationJobItemViewState> BuildStationJobViewStateList(StationJobInformation jobInformation)
    {
        var viewStateList = new List<StationJobItemViewState>();

        foreach (var (jobPrototype, jobCount) in jobInformation.JobsAvailable)
        {
            var prototype = _prototypeManager.Index(jobPrototype);
            var jobName = jobCount > 0 ? $"{prototype.LocalizedName} ({jobCount})" : prototype.LocalizedName;
            Texture? texture = null;

            if (_prototypeManager.TryIndex(prototype.Icon, out var jobIcon))
            {
                texture = _spriteSystem.Frame0(jobIcon.Icon);
            }

            var viewState = new StationJobItemViewState(jobPrototype, jobName, jobCount == 0, texture);
            viewStateList.Add(viewState);
        }

        return viewStateList;
    }

    /**
     * Convert some raw dictionary data to a view state model that is more readable.
     *
     * @param obj Dictionary of station entities to job prototypes.
     * @param stationNames Dictionary of station entities to station names.
     * @return List of view states for each station.
     */
    private List<StationItemViewState> BuildStationViewStateList(
        IReadOnlyDictionary<NetEntity, StationJobInformation> obj)
    {
        var viewStateList = new List<StationItemViewState>();

        foreach (var (stationEntity, stationJobInformation) in obj)
        {
            var viewState = new StationItemViewState(
                stationEntity,
                stationJobInformation.StationName,
                stationJobInformation.StationSubtext != null
                    ? _loc.GetString(stationJobInformation.StationSubtext)
                    : "",
                stationJobInformation.StationDescription != null
                    ? _loc.GetString(stationJobInformation.StationDescription)
                    : "",
                _lastSelectedStation?.StationEntity == stationEntity,
                stationJobInformation.StationIcon?.CanonPath
            );

            // Always select the first station in the list if none is selected yet.
            // This is because otherwise the right side of the screen would then be a blank space.
            if (_lastSelectedStation == null)
            {
                _lastSelectedStation = viewState;
                viewState.Selected = true;
            }

            viewStateList.Add(viewState);
        }

        // Sort 0 to the end of the list in the order it is in the dictionary.
        // Sort 1 first, 2 second, etc.
        return viewStateList
            .OrderBy(viewState => obj[viewState.StationEntity].LobbySortOrder == 0 ? int.MaxValue : obj[viewState.StationEntity].LobbySortOrder)
            .ToList();
    }
}
