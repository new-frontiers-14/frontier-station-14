using System.Linq;
using Content.Client.GameTicking.Managers;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;

namespace Content.Client._NF.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class VesselListControl : BoxContainer
{

    private ClientGameTicker _gameTicker;

    public Comparison<NetEntity>? Comparison;

    public NetEntity? Selected
    {
        get
        {
            var i = VesselItemList.GetSelected().FirstOrDefault();
            if (i is null)
                return null;

            return (NetEntity) i.Metadata!;
        }
    }

    private IReadOnlyDictionary<NetEntity, Dictionary<string, uint?>>? _lastJobState;

    public VesselListControl()
    {
        _gameTicker = EntitySystem.Get<ClientGameTicker>();
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _gameTicker.LobbyJobsAvailableUpdated += UpdateUi;
        Comparison = DefaultComparison;

        UpdateUi(_gameTicker.JobsAvailable);

        FilterLineEdit.OnTextChanged += _ =>
        {
            if (_lastJobState != null)
                UpdateUi(_lastJobState);
        };
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _gameTicker.LobbyJobsAvailableUpdated -= UpdateUi;
    }

    private int DefaultComparison(NetEntity x, NetEntity y)
    {
        var xContainsHop = _gameTicker.JobsAvailable[x].ContainsKey("HeadOfPersonnel");
        var yContainsHop = _gameTicker.JobsAvailable[y].ContainsKey("HeadOfPersonnel");

        var xContainsHos = _gameTicker.JobsAvailable[x].ContainsKey("HeadOfSecurity");
        var yContainsHos = _gameTicker.JobsAvailable[y].ContainsKey("HeadOfSecurity");

        // Prioritize "HeadOfPersonnel"
        switch (xContainsHop)
        {
            case true when !yContainsHop:
                return -1;
            case false when yContainsHop:
                return 1;
        }

        // If both or neither contain "HeadOfPersonnel", prioritize "HeadOfSecurity"
        switch (xContainsHos)
        {
            case true when !yContainsHos:
                return -1;
            case false when yContainsHos:
                return 1;
        }

        // If both or neither contain "HeadOfPersonnel" and "HeadOfSecurity", sort by jobCountComparison
        var jobCountComparison = -(int) (_gameTicker.JobsAvailable[x].Values.Sum(a => a ?? 0) -
                                         _gameTicker.JobsAvailable[y].Values.Sum(b => b ?? 0));
        var nameComparison = string.Compare(_gameTicker.StationNames[x], _gameTicker.StationNames[y], StringComparison.Ordinal);

        // Combine the comparisons
        return jobCountComparison != 0 ? jobCountComparison : nameComparison;
    }

    private void Sort()
    {
        if (Comparison != null)
            VesselItemList.Sort((a, b) => Comparison((NetEntity) a.Metadata!, (NetEntity) b.Metadata!));
    }

    private void UpdateUi(IReadOnlyDictionary<NetEntity, Dictionary<string, uint?>> obj)
    {
        VesselItemList.Clear();

        foreach (var (key, name) in _gameTicker.StationNames)
        {
            if (VesselItemList.Any(x => ((NetEntity) x.Metadata!) == key))
                continue;

            var jobsAvailable = _gameTicker.JobsAvailable[key].Values.Sum(a => a ?? 0);
            var item = new ItemList.Item(VesselItemList)
            {
                Metadata = key,
                Text = name + $" ({jobsAvailable})"
            };
            if (!string.IsNullOrEmpty(FilterLineEdit.Text) &&
                !name.ToLowerInvariant().Contains(FilterLineEdit.Text.Trim().ToLowerInvariant()))
            {
                continue;
            }

            VesselItemList.Add(item);
        }

        _lastJobState = obj;
        Sort();

        if (Selected == null && VesselItemList.Count > 0)
        {
            VesselItemList.First().Selected = true;
        }
    }
}
