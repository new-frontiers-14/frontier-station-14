using Content.Client.UserInterface.Controls;
using Content.Shared._NF.Market;
using Content.Shared._NF.Market.BUI;
using Content.Shared.Cargo.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._NF.Market.UI;

[GenerateTypedNameReferences]
public sealed partial class MarketMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    public event Action<BaseButton.ButtonEventArgs>? OnAddToCart;
    public event Action<BaseButton.ButtonEventArgs>? OnReturn;
    public event Action<BaseButton.ButtonEventArgs>? OnPurchaseCrate;

    public MarketMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        PurchaseCrate.OnPressed += args => OnPurchaseCrate?.Invoke(args);
    }

    public void SetEnabled(bool enabled)
    {
        // TODO disable buttons where possible
    }

    public void UpdateState(MarketConsoleInterfaceState uiState)
    {
        Populate(uiState.MarketDataList, uiState.CartDataList, uiState.MarketModifier);
        BalanceLabel.Text = $" ${uiState.Balance}";
        CartBalanceLabel.Text = $" ${uiState.CartBalance}";
    }

    public void Populate(List<MarketData> data, List<MarketData> cartData, float marketModifier)
    {
        Products.RemoveAllChildren();
        Cart.RemoveAllChildren();

        AddRows(Products, false, data, marketModifier);
        AddRows(Cart, true, cartData, marketModifier);
    }

    private void AddRows(BoxContainer container, bool isCart, List<MarketData> data, float marketModifier)
    {
        foreach (var marketData in data)
        {
            // Try to get the EntityPrototype that matches marketData.Prototype
            if (!_protoManager.TryIndex<EntityPrototype>(marketData.Prototype, out var prototype))
            {
                continue; // Skip this iteration if the prototype was not found
            }

            if (!prototype.TryGetComponent<SpriteComponent>(out var sprite))
            {
                continue; // Skip this iteration if the prototype was not found
            }

            var price = 0f;
            if (prototype.TryGetComponent<StaticPriceComponent>(out var staticPrice))
            {
                price = (float) (staticPrice.Price * marketModifier);
            }

            var roundedPrice = (int) Math.Round(price);

            if (isCart)
            {
                var productRow = new MarketCartProductRow(marketData.Prototype)
                {
                    Title = { Text = prototype.Name },
                    Quantity = { Text = marketData.Quantity.ToString() },
                    Price = { Text = $"${roundedPrice}" },
                    Icon = { Texture = sprite.Icon?.Default }
                };
                productRow.Return.OnPressed += args => { OnReturn?.Invoke(args); };

                container.AddChild(productRow);
            }
            else
            {
                var productRow = new MarketProductRow(marketData.Prototype)
                {
                    Title = { Text = prototype.Name },
                    Quantity = { Text = marketData.Quantity.ToString() },
                    Price = { Text = $"${roundedPrice}" },
                    Icon = { Texture = sprite.Icon?.Default }
                };
                productRow.AddToCart.OnPressed += args => { OnAddToCart?.Invoke(args); };

                container.AddChild(productRow);
            }
        }
    }
}
