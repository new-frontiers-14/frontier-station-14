using Content.Shared._NF.DeviceLinking;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Client.GameObjects;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Input;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Range = Robust.Client.UserInterface.Controls.Range;

namespace Content.Client._NF.DeviceLinking.UI;

[GenerateTypedNameReferences]
public sealed partial class RngDeviceWindow : DefaultWindow
{
    private readonly CheckBox _muteCheckBox;
    private readonly CheckBox _edgeModeCheckBox;
    private readonly SpinBox _targetNumberSpinBox;
    private readonly Slider _targetNumberSlider;
    private readonly BoxContainer _targetNumberContainer;
    private readonly Button _minusButton;
    private readonly Button _plusButton;
    private RngDeviceBoundUserInterfaceState? _state;
    private bool _updatingControls;

    public event Action<bool>? OnMuteToggled;
    public event Action<bool>? OnEdgeModeToggled;
    public event Action<int>? OnTargetNumberChanged;

    public RngDeviceWindow()
    {
        RobustXamlLoader.Load(this);
        Title = Loc.GetString("rng-device-window-title");

        _muteCheckBox = MuteCheckBox;
        _muteCheckBox.OnToggled += OnMuteCheckBoxToggled;

        _edgeModeCheckBox = EdgeModeCheckBox;
        _edgeModeCheckBox.OnToggled += OnEdgeModeCheckBoxToggled;

        _targetNumberContainer = TargetNumberContainer;

        _targetNumberSpinBox = TargetNumberSpinBox;
        _targetNumberSpinBox.ValueChanged += OnTargetNumberSpinBoxChanged;

        _targetNumberSlider = TargetNumberSlider;
        _targetNumberSlider.OnValueChanged += OnTargetNumberSliderChanged;
        _targetNumberSlider.OnKeyBindUp += OnTargetNumberSliderReleased;

        _minusButton = MinusButton;
        _plusButton = PlusButton;
        _minusButton.OnPressed += _ => AdjustTargetNumber(-1);
        _plusButton.OnPressed += _ => AdjustTargetNumber(1);
    }

    private void AdjustTargetNumber(int delta)
    {
        var newValue = Math.Clamp(_targetNumberSpinBox.Value + delta, 1, 100);
        _targetNumberSpinBox.Value = newValue;
    }

    private void OnMuteCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
    {
        OnMuteToggled?.Invoke(args.Pressed);
    }

    private void OnEdgeModeCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
    {
        OnEdgeModeToggled?.Invoke(args.Pressed);
    }

    private void OnTargetNumberSpinBoxChanged(ValueChangedEventArgs args)
    {
        if (_updatingControls)
            return;

        var value = (int)args.Value;
        _updatingControls = true;
        OnTargetNumberChanged?.Invoke(value);
        _targetNumberSlider.SetValueWithoutEvent(value);
        _updatingControls = false;
    }

    private void OnTargetNumberSliderChanged(Range slider)
    {
        if (_updatingControls)
            return;

        var value = (int)slider.Value;
        _updatingControls = true;
        _targetNumberSpinBox.OverrideValue(value);
        _updatingControls = false;
    }

    private void OnTargetNumberSliderReleased(GUIBoundKeyEventArgs args)
    {
        if (args.Function != EngineKeyFunctions.UIClick)
            return;

        OnTargetNumberChanged?.Invoke((int)_targetNumberSlider.Value);
    }

    public void UpdateState(RngDeviceBoundUserInterfaceState state)
    {
        _state = state;
        _updatingControls = true;
        _muteCheckBox.Pressed = state.Muted;
        _edgeModeCheckBox.Pressed = state.EdgeMode;

        Title = Loc.GetString("rng-device-window-title", ("type", state.DeviceType));

        // Only update values if the slider isn't being dragged
        if (!_targetNumberSlider.Grabbed)
        {
            _targetNumberSpinBox.OverrideValue(state.TargetNumber);
            _targetNumberSlider.SetValueWithoutEvent(state.TargetNumber);
        }

        _targetNumberContainer.Visible = state.Outputs == 2; // Only show for percentile variant
        _updatingControls = false;
    }

    public void SetOutputs(int outputs)
    {
        // This method is no longer needed as we handle visibility in UpdateState
        _targetNumberContainer.Visible = outputs == 2;
    }
}
