using Content.Shared._NF.DeviceLinking.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Input;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Range = Robust.Client.UserInterface.Controls.Range;

namespace Content.Client._NF.DeviceLinking.UI;

[GenerateTypedNameReferences]
public sealed partial class RngDeviceWindow : DefaultWindow
{
    private bool _updatingControls;

    public event Action<bool>? OnMuteToggled;
    public event Action<bool>? OnEdgeModeToggled;
    public event Action<int>? OnTargetNumberChanged;

    public RngDeviceWindow()
    {
        RobustXamlLoader.Load(this);
        Title = Loc.GetString("rng-device-window-title");

        MuteCheckBox.OnToggled += OnMuteCheckBoxToggled;
        EdgeModeCheckBox.OnToggled += OnEdgeModeCheckBoxToggled;
        TargetNumberSpinBox.ValueChanged += OnTargetNumberSpinBoxChanged;
        TargetNumberSlider.OnValueChanged += OnTargetNumberSliderChanged;
        TargetNumberSlider.OnKeyBindUp += OnTargetNumberSliderReleased;
        MinusButton.OnPressed += _ => AdjustTargetNumber(-1);
        PlusButton.OnPressed += _ => AdjustTargetNumber(1);
    }

    private void AdjustTargetNumber(int delta)
    {
        var newValue = Math.Clamp(TargetNumberSpinBox.Value + delta, 1, 100);
        TargetNumberSpinBox.Value = newValue;
    }

    private void OnMuteCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
    {
        OnMuteToggled?.Invoke(args.Pressed);
    }

    private void OnEdgeModeCheckBoxToggled(BaseButton.ButtonToggledEventArgs args)
    {
        OnEdgeModeToggled?.Invoke(args.Pressed);
    }

    private void OnTargetNumberSpinBoxChanged(ValueChangedEventArgs args)
    {
        if (_updatingControls)
            return;

        var value = (int)args.Value;
        _updatingControls = true;
        OnTargetNumberChanged?.Invoke(value);
        TargetNumberSlider.SetValueWithoutEvent(value);
        _updatingControls = false;
    }

    private void OnTargetNumberSliderChanged(Range slider)
    {
        if (_updatingControls)
            return;

        var value = (int)slider.Value;
        _updatingControls = true;
        TargetNumberSpinBox.OverrideValue(value);
        _updatingControls = false;
    }

    private void OnTargetNumberSliderReleased(GUIBoundKeyEventArgs args)
    {
        if (args.Function != EngineKeyFunctions.UIClick)
            return;

        OnTargetNumberChanged?.Invoke((int)TargetNumberSlider.Value);
    }

    public void SetDeviceType(string prefix)
    {
        var deviceType = prefix.Substring(0, 1).ToUpperInvariant() + prefix.Substring(1);
        Title = Loc.GetString("rng-device-window-title", ("type", deviceType));
    }

    public void SetMuted(bool muted)
    {
        _updatingControls = true;
        MuteCheckBox.Pressed = muted;
        _updatingControls = false;
    }

    public void SetEdgeMode(bool edgeMode)
    {
        _updatingControls = true;
        EdgeModeCheckBox.Pressed = edgeMode;
        _updatingControls = false;
    }

    public void SetTargetNumber(int targetNumber)
    {
        if (!TargetNumberSlider.Grabbed)
        {
            _updatingControls = true;
            TargetNumberSpinBox.OverrideValue(targetNumber);
            TargetNumberSlider.SetValueWithoutEvent(targetNumber);
            _updatingControls = false;
        }
    }

    public void SetTargetNumberVisibility(bool visible)
    {
        TargetNumberContainer.Visible = visible;
    }
}
