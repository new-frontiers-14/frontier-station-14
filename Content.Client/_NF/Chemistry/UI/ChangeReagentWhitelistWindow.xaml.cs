using Content.Shared._NF.Chemistry.Components;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._NF.Chemistry.UI;

/// <summary>
///     A window that allows you to change the whitelist of the associated injector
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class ChangeReagentWhitelistWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private EntityUid _injectorEntity = EntityUid.Invalid;
    private ReagentPrototype? _selectedReagent;

    public Action? OnResetWhitelistReagent;
    public Action<ProtoId<ReagentPrototype>>? OnChangeWhitelistedReagent;

    public ChangeReagentWhitelistWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Title = Loc.GetString("ui-change-reagent-whitelist-title");

        ReagentList.OnItemSelected += ReagentListSelected;
        ReagentList.OnItemDeselected += ReagentListDeselected;
        SearchBar.OnTextChanged += (_) => UpdateReagentPrototypes(SearchBar.Text);
        ApplyButton.OnPressed += OnApplyButtonPressed;
        ResetButton.OnPressed += (_) => OnResetWhitelistReagent?.Invoke();

        ResetButton.Text = Loc.GetString("ui-change-reagent-whitelist-resetbutton-text");
    }

    public void SetEntity(EntityUid owner)
    {
        _injectorEntity = owner;

        UpdateReagentPrototypes();
        UpdateApplyButton();
    }

    private void ReagentListSelected(ItemList.ItemListSelectedEventArgs obj)
    {
        _selectedReagent = (ReagentPrototype)obj.ItemList[obj.ItemIndex].Metadata!;
        UpdateApplyButton();
    }

    private void ReagentListDeselected(ItemList.ItemListDeselectedEventArgs obj)
    {
        _selectedReagent = null;
        UpdateApplyButton();
    }

    private void OnApplyButtonPressed(BaseButton.ButtonEventArgs _)
    {
        if (_selectedReagent != null)
            OnChangeWhitelistedReagent?.Invoke(_selectedReagent);
    }

    /// <summary>
    ///     Set the Text and enabled/disabled status of the button that actually adds the reagent.
    /// </summary>
    private void UpdateApplyButton()
    {
        ApplyButton.Disabled = true;
        if (_selectedReagent == null)
        {
            ApplyButton.Text = Loc.GetString("ui-change-reagent-whitelist-apply-missing-reagent");
            return;
        }

        ApplyButton.Text = Loc.GetString("ui-change-reagent-whitelist-apply",
            ("reagent", _selectedReagent.ID));
        ApplyButton.Disabled = false;
    }

    /// <summary>
    ///     Get a list of all applicable reagent prototypes and show them in an item list.
    /// </summary>
    private void UpdateReagentPrototypes(string? filter = null)
    {
        ReagentList.Clear();

        List<string> allowedReagentGroups = new();
        if (_entityManager.TryGetComponent<ReagentWhitelistChangeComponent>(_injectorEntity, out var reagentWhitelistChangeComp))
        {
            allowedReagentGroups = reagentWhitelistChangeComp.AllowedReagentGroups;
        }


        foreach (var reagent in _prototypeManager.EnumeratePrototypes<ReagentPrototype>())
        {
            if (!string.IsNullOrEmpty(filter) &&
                !reagent.ID.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
            {
                continue;
            }

            if (!allowedReagentGroups.Contains(reagent.Group))
            {
                continue;
            }

            ItemList.Item reagentItem = new(ReagentList)
            {
                Metadata = reagent,
                Text = reagent.ID
            };

            ReagentList.Add(reagentItem);
        }
    }
}

