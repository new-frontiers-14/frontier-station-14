using Content.Shared._NF.BountyContracts;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NF.BountyContracts.UI;

[GenerateTypedNameReferences]
public sealed partial class BountyContractUiFragmentList : Control
{
    public event Action? OnCreateButtonPressed;
    public event Action? OnRefreshButtonPressed;
    public event Action? OnToggleNotificationPressed;
    public event Action<BountyContract>? OnRemoveButtonPressed;
    public BountyContractUiFragmentList()
    {
        RobustXamlLoader.Load(this);
        CreateButton.OnPressed += _ => OnCreateButtonPressed?.Invoke();
        RefreshButton.OnPressed += _ => OnRefreshButtonPressed?.Invoke();
        NotificationSwitch.OnPressed += _ => OnToggleNotificationPressed?.Invoke();
    }

    public void SetContracts(List<BountyContract> listStateContracts, bool canRemove, NetEntity authorUid)
    {
        BountiesContainer.RemoveAllChildren();

        if (listStateContracts.Count == 0)
        {
            NoContractsLabel.Visible = true;
            return;
        }

        NoContractsLabel.Visible = false;
        listStateContracts.Reverse();
        foreach (var contract in listStateContracts)
        {
            var entry = new BountyContractUiFragmentListEntry(contract, canRemove || contract.AuthorUid == authorUid);
            entry.OnRemoveButtonPressed += c => OnRemoveButtonPressed?.Invoke(c);
            BountiesContainer.AddChild(entry);
        }
    }

    public void SetCanCreate(bool canCreate)
    {
        CreateButton.Disabled = !canCreate;
    }

    public void SetNotificationsEnabled(bool notificationsEnabled)
    {
        NotificationSwitch.Text = Loc.GetString(notificationsEnabled ? "news-read-ui-notification-on" : "news-read-ui-notification-off");
    }
}
