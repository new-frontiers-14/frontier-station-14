using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Client.Shipyard.BUI;
using Content.Shared.Shipyard.BUI;
using Content.Shared.Shipyard.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;
using Content.Shared.Shipyard;

namespace Content.Client.Shipyard.UI;

[GenerateTypedNameReferences]
public sealed partial class ShipyardConsoleMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    public event Action<ButtonEventArgs>? OnSellShip;
    public event Action<ButtonEventArgs>? OnOrderApproved;
    private readonly ShipyardConsoleBoundUserInterface _menu;
    private readonly List<string> _categoryStrings = new();
    private string? _category;

    public ShipyardConsoleMenu(ShipyardConsoleBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _menu = owner;
        Title = Loc.GetString("shipyard-console-menu-title");
        SearchBar.OnTextChanged += OnSearchBarTextChanged;
        Categories.OnItemSelected += OnCategoryItemSelected;
        SellShipButton.OnPressed += (args) => { OnSellShip?.Invoke(args); };
    }


    private void OnCategoryItemSelected(OptionButton.ItemSelectedEventArgs args)
    {
        SetCategoryText(args.Id);
        PopulateProducts((ShipyardConsoleUiKey) _menu.UiKey);
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateProducts((ShipyardConsoleUiKey) _menu.UiKey);
    }

    private void SetCategoryText(int id)
    {
        _category = id == 0 ? null : _categoryStrings[id];
        Categories.SelectId(id);
    }

    private void GetPrototypes(out IEnumerable<VesselPrototype> vessels)
    {
        vessels = _protoManager.EnumeratePrototypes<VesselPrototype>();
    }

    /// <summary>
    ///     Populates the list of products that will actually be shown, using the current filters.
    /// </summary>
    public void PopulateProducts(ShipyardConsoleUiKey uiKey)
    {
        Vessels.RemoveAllChildren();
        GetPrototypes(out var vessels);
        var vesselList = vessels.ToList();
        vesselList.Sort((x, y) =>
            string.Compare(x.Name, y.Name, StringComparison.CurrentCultureIgnoreCase));

        var type = uiKey switch
        {
            ShipyardConsoleUiKey.Shipyard => "Civilian",
            ShipyardConsoleUiKey.Security => "Security",
            ShipyardConsoleUiKey.BlackMarket => "BlackMarket",
            _ => "Shipyard",
        };

        var search = SearchBar.Text.Trim().ToLowerInvariant();

        foreach (var prototype in vesselList)
        {
            // filter by type for ui key
            if (prototype.Group != type)
            {
                continue;
            }
            // if no search or category
            // else if search
            // else if category and not search
            if (search.Length == 0 && _category == null ||
                search.Length != 0 && prototype.Name.ToLowerInvariant().Contains(search) ||
                search.Length == 0 && _category != null && prototype.Category.Equals(_category))
            {
                var vesselEntry = new VesselRow
                {
                    Vessel = prototype,
                    VesselName = { Text = prototype.Name },
                    Purchase = { ToolTip = prototype.Description, TooltipDelay = 0.2f },
                    Price = { Text = Loc.GetString("cargo-console-menu-points-amount", ("amount", prototype.Price.ToString())) },
                };
                vesselEntry.Purchase.OnPressed += (args) => { OnOrderApproved?.Invoke(args); };
                Vessels.AddChild(vesselEntry);
            }
        }
    }

    /// <summary>
    ///     Populates the list categories that will actually be shown, using the current filters.
    /// </summary>
    public void PopulateCategories()
    {
        _categoryStrings.Clear();
        Categories.Clear();
        GetPrototypes(out var vessels);
        foreach (var prototype in vessels)
        {
            if (!_categoryStrings.Contains(prototype.Category))
            {
                _categoryStrings.Add(Loc.GetString(prototype.Category));
            }
        }

        _categoryStrings.Sort();

        // Add "All" category at the top of the list
        _categoryStrings.Insert(0, Loc.GetString("cargo-console-menu-populate-categories-all-text"));

        foreach (var str in _categoryStrings)
        {
            Categories.AddItem(str);
        }
    }

    public void UpdateState(ShipyardConsoleInterfaceState state)
    {
        BankAccountLabel.Text = Loc.GetString("cargo-shipyard-console-bank-amount", ("amount", state.Balance.ToString()));
        ShipSellValueLabel.Text = Loc.GetString("cargo-shipyard-console-sell-value", ("value", state.ShipSellValue.ToString()));
        SellShipButton.Disabled = state.ShipDeedTitle == null;
        TargetIdButton.Text = state.IsTargetIdPresent
            ? Loc.GetString("id-card-console-window-eject-button")
            : Loc.GetString("id-card-console-window-insert-button");
        if (state.ShipDeedTitle != null)
        {
            DeedTitle.Text = state.ShipDeedTitle;
        }
        else
        {
            DeedTitle.Text = $"None";
        }
    }
}
