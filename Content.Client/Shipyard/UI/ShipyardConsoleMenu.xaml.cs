using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Client.Shipyard.BUI;
using Content.Shared.Shipyard.BUI;
using Content.Shared.Shipyard.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;
using Content.Shared.Shipyard;
using Content.Shared.Emp;

namespace Content.Client.Shipyard.UI;

[GenerateTypedNameReferences]
public sealed partial class ShipyardConsoleMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    public event Action<ButtonEventArgs>? OnSellShip;
    public event Action<ButtonEventArgs>? OnOrderApproved;
    private readonly ShipyardConsoleBoundUserInterface _menu;
    private readonly List<string> _categoryStrings = new();
    private readonly List<string> _classStrings = new();
    private string? _category;
    private string? _class;

    private List<string> _lastAvailableProtos = new();
    private List<string> _lastUnavailableProtos = new();
    private string _lastType = "";
    private bool _freeListings = false;
    private bool _validId = false;

    public ShipyardConsoleMenu(ShipyardConsoleBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _menu = owner;
        Title = Loc.GetString("shipyard-console-menu-title");
        SearchBar.OnTextChanged += OnSearchBarTextChanged;
        Categories.OnItemSelected += OnCategoryItemSelected;
        Classes.OnItemSelected += OnClassItemSelected;
        SellShipButton.OnPressed += (args) => { OnSellShip?.Invoke(args); };
    }


    private void OnCategoryItemSelected(OptionButton.ItemSelectedEventArgs args)
    {
        SetCategoryText(args.Id);
        PopulateProducts(_lastAvailableProtos, _lastUnavailableProtos, _lastType, _freeListings, _validId);
    }

    private void OnClassItemSelected(OptionButton.ItemSelectedEventArgs args)
    {
        SetClassText(args.Id);
        PopulateProducts(_lastAvailableProtos, _lastUnavailableProtos, _lastType, _freeListings, _validId);
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateProducts(_lastAvailableProtos, _lastUnavailableProtos, _lastType, _freeListings, _validId);
    }

    private void SetCategoryText(int id)
    {
        _category = id == 0 ? null : _categoryStrings[id];
        Categories.SelectId(id);
    }
    private void SetClassText(int id)
    {
        _class = id == 0 ? null : _classStrings[id];
        Classes.SelectId(id);
    }
    /// <summary>
    ///     Populates the list of products that will actually be shown, using the current filters.
    /// </summary>
    public void PopulateProducts(List<string> availablePrototypes, List<string> unavailablePrototypes, string type, bool free, bool canPurchase)
    {
        Vessels.RemoveAllChildren();

        var newVessels = availablePrototypes.Select(it => _protoManager.TryIndex<VesselPrototype>(it, out var proto) ? proto : null)
            .Where(it => it != null)
            .ToList();

        newVessels.Sort((x, y) =>
            string.Compare(x!.Name, y!.Name, StringComparison.CurrentCultureIgnoreCase));

        var search = SearchBar.Text.Trim().ToLowerInvariant();

        foreach (var prototype in newVessels)
        {
            // if no search or category
            // else if search
            // else if category and not search
            if (search.Length == 0 && _category == null && _class == null ||
                search.Length != 0 && prototype!.Name.ToLowerInvariant().Contains(search) ||
                search.Length == 0 && _category != null && prototype!.Category.Equals(_category) ||
                search.Length == 0 && _class != null && prototype!.Group.Equals(_class))
            {
                string priceText;
                if (free)
                    priceText = Loc.GetString("shipyard-console-menu-listing-free");
                else
                    priceText = Loc.GetString("shipyard-console-menu-listing-amount", ("amount", prototype!.Price.ToString()));

                string purchaseText;
                if (canPurchase)
                    purchaseText = Loc.GetString("shipyard-console-purchase-available");
                else
                    purchaseText = Loc.GetString("shipyard-console-purchase-unavailable");

                var vesselEntry = new VesselRow
                {
                    Vessel = prototype,
                    VesselName = { Text = prototype!.Name },
                    Purchase = { Text = purchaseText, ToolTip = prototype.Description, TooltipDelay = 0.2f, Disabled = !canPurchase },
                    Guidebook = { Disabled = prototype.GuidebookPage is null },
                    Price = { Text = priceText },
                };
                vesselEntry.Purchase.OnPressed += (args) => { OnOrderApproved?.Invoke(args); };
                Vessels.AddChild(vesselEntry);
            }
        }

        // Extremely gross, fix please

        var newUnavailableVessels = unavailablePrototypes.Select(it => _protoManager.TryIndex<VesselPrototype>(it, out var proto) ? proto : null)
            .Where(it => it != null)
            .ToList();

        newUnavailableVessels.Sort((x, y) =>
            string.Compare(x!.Name, y!.Name, StringComparison.CurrentCultureIgnoreCase));

        foreach (var prototype in newUnavailableVessels)
        {
            // if no search or category
            // else if search
            // else if category and not search
            if (search.Length == 0 && _category == null && _class == null ||
                search.Length != 0 && prototype!.Name.ToLowerInvariant().Contains(search) ||
                search.Length == 0 && _category != null && prototype!.Category.Equals(_category) ||
                search.Length == 0 && _class != null && prototype!.Group.Equals(_class))
            {
                string priceText;
                if (free)
                    priceText = Loc.GetString("shipyard-console-menu-listing-free");
                else
                    priceText = Loc.GetString("shipyard-console-menu-listing-amount", ("amount", prototype!.Price.ToString()));
                string purchaseText = Loc.GetString("shipyard-console-purchase-unavailable");

                var vesselEntry = new VesselRow
                {
                    Vessel = prototype,
                    VesselName = { Text = prototype!.Name },
                    Purchase = { Text = purchaseText, ToolTip = prototype.Description, TooltipDelay = 0.2f, Disabled = true },
                    Guidebook = { Disabled = prototype.GuidebookPage is null },
                    Price = { Text = priceText },
                };
                vesselEntry.Purchase.OnPressed += (args) => { OnOrderApproved?.Invoke(args); };
                Vessels.AddChild(vesselEntry);
            }
        }

        _lastAvailableProtos = availablePrototypes;
        _lastUnavailableProtos = unavailablePrototypes;
        _lastType = type;
    }

    /// <summary>
    ///     Populates the list categories that will actually be shown, using the current filters.
    /// </summary>
    public void PopulateCategories()
    {
        _categoryStrings.Clear();
        Categories.Clear();
        var vessels = _protoManager.EnumeratePrototypes<VesselPrototype>();
        foreach (var prototype in vessels)
        {
            if (!_categoryStrings.Contains(prototype.Category))
            {
                _categoryStrings.Add(Loc.GetString(prototype.Category));
            }
        }

        _categoryStrings.Sort();

        // Add "All" category at the top of the list
        _categoryStrings.Insert(0, Loc.GetString("cargo-console-menu-populate-categories-all-text"));

        foreach (var str in _categoryStrings)
        {
            Categories.AddItem(str);
        }
    }

    public void PopulateClasses()
    {
        _classStrings.Clear();
        Classes.Clear();
        var vessels = _protoManager.EnumeratePrototypes<VesselPrototype>();
        foreach (var prototype in vessels)
        {
            if (!_classStrings.Contains(prototype.Group))
            {
                _classStrings.Add(Loc.GetString(prototype.Group));
            }
        }

        _classStrings.Sort();

        // Add "All" category at the top of the list
        _classStrings.Insert(0, Loc.GetString("cargo-console-menu-populate-categories-all-text"));

        foreach (var str in _classStrings)
        {
            Classes.AddItem(str);
        }
    }

    public void UpdateState(ShipyardConsoleInterfaceState state)
    {
        BalanceLabel.Text = Loc.GetString("shipyard-console-menu-listing-amount", ("amount", state.Balance.ToString()));
        int shipPrice = 0;
        if (!state.FreeListings)
            shipPrice = state.ShipSellValue;

        ShipAppraisalLabel.Text = Loc.GetString("shipyard-console-menu-listing-amount", ("amount", shipPrice.ToString()));
        SellShipButton.Disabled = state.ShipDeedTitle == null;
        TargetIdButton.Text = state.IsTargetIdPresent
            ? Loc.GetString("id-card-console-window-eject-button")
            : Loc.GetString("id-card-console-window-insert-button");
        if (state.ShipDeedTitle != null)
        {
            DeedTitle.Text = state.ShipDeedTitle;
        }
        else
        {
            DeedTitle.Text = $"None";
        }
        _freeListings = state.FreeListings;
        _validId = state.IsTargetIdPresent;
        PopulateProducts(_lastAvailableProtos, _lastUnavailableProtos, _lastType, _freeListings, _validId);
    }
}
