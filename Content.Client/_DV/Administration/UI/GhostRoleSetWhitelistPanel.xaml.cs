using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._DV.Administration.UI;

// Frontier: ghost role whitelist set
[GenerateTypedNameReferences]
public sealed partial class GhostRoleSetWhitelistPanel : PanelContainer
{
    public Action<ProtoId<GhostRolePrototype>, bool>? OnSetGhostRole;

    public GhostRoleSetWhitelistPanel(List<ProtoId<GhostRolePrototype>> ghostRoleList, string ghostRoleSetName, Color ghostRoleSetColor, IPrototypeManager proto, HashSet<ProtoId<GhostRolePrototype>> whitelists, bool globalWhitelist)
    {
        RobustXamlLoader.Load(this);

        var allWhitelisted = true;
        foreach (var id in ghostRoleList)
        {
            var thisRole = id; // closure capturing funny
            var button = new CheckBox();
            button.Text = Loc.GetString(proto.Index(id).Name);
            button.Pressed = whitelists.Contains(id) || globalWhitelist;
            button.OnPressed += _ => OnButtonPressed(thisRole, button, globalWhitelist);
            RolesContainer.AddChild(button);

            allWhitelisted &= button.Pressed;
        }

        GhostRoleSet.Text = Loc.GetString(ghostRoleSetName);
        GhostRoleSet.Modulate = ghostRoleSetColor;
        GhostRoleSet.Pressed = allWhitelisted;
        GhostRoleSet.OnPressed += args => OnDepartmentPressed(ghostRoleList, whitelists, globalWhitelist);
    }

    // Frontier: global whitelist
    private void OnButtonPressed(ProtoId<GhostRolePrototype> thisRole, CheckBox button, bool globalWhitelist)
    {
        if (globalWhitelist)
            button.Pressed = true; // Force the button on.
        else
            OnSetGhostRole?.Invoke(thisRole, button.Pressed);
    }

    private void OnDepartmentPressed(List<ProtoId<GhostRolePrototype>> ghostRoleList, HashSet<ProtoId<GhostRolePrototype>> whitelists, bool globalWhitelist)
    {
        // Frontier: global override
        if (globalWhitelist)
        {
            GhostRoleSet.Pressed = true;
            return;
        }
        // End Frontier: global override

        foreach (var id in ghostRoleList)
        {
            // only request to whitelist roles that aren't already whitelisted, and vice versa
            if (whitelists.Contains(id) != GhostRoleSet.Pressed)
                OnSetGhostRole?.Invoke(id, GhostRoleSet.Pressed);
        }
    }
    // End Frontier

}
// End Frontier
