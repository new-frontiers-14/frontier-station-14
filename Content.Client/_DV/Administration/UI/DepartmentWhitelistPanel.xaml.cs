using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._DV.Administration.UI;

[GenerateTypedNameReferences]
public sealed partial class DepartmentWhitelistPanel : PanelContainer
{
    public Action<ProtoId<JobPrototype>, bool>? OnSetJob;

    public DepartmentWhitelistPanel(DepartmentPrototype department, IPrototypeManager proto, HashSet<ProtoId<JobPrototype>> whitelists, bool globalWhitelist) // Frontier: add globalWhitelist
    {
        RobustXamlLoader.Load(this);

        var anyValid = false;//
        var allWhitelisted = true;
        var grey = Color.FromHex("#ccc");
        foreach (var id in department.Roles)
        {
            var thisJob = id; // closure capturing funny

            // Frontier: skip non-whitelisted roles, cache prototype
            var jobProto = proto.Index(id);
            if (!jobProto.Whitelisted)
                continue;
            else
                anyValid = true;
            // End Frontier

            var button = new CheckBox();
            button.Text = jobProto.LocalizedName;
            if (!jobProto.Whitelisted)
                button.Modulate = grey; // Let admins know whitelisting this job is only for futureproofing.
            button.Pressed = whitelists.Contains(id) || globalWhitelist;
            button.OnPressed += _ => OnButtonPressed(thisJob, button, globalWhitelist); // Frontier: check global whitelist
            JobsContainer.AddChild(button);

            allWhitelisted &= button.Pressed;
        }

        if (!anyValid) // Frontier: hide checkbox set if no valid events
            Visible = false;  // Frontier

        Department.Text = Loc.GetString(department.Name);
        Department.Modulate = department.Color;
        Department.Pressed = allWhitelisted;
        Department.OnPressed += args => OnDepartmentPressed(department, proto, whitelists, globalWhitelist); // Frontier: check global whitelist
    }

    // Frontier: global whitelist handling
    private void OnButtonPressed(ProtoId<JobPrototype> thisJob, CheckBox button, bool globalWhitelist)
    {
        if (globalWhitelist)
            button.Pressed = true; // Force the button on.
        else
            OnSetJob?.Invoke(thisJob, button.Pressed);
    }

    private void OnDepartmentPressed(DepartmentPrototype department, IPrototypeManager proto, HashSet<ProtoId<JobPrototype>> whitelists, bool globalWhitelist)
    {
        // Frontier: global override
        if (globalWhitelist)
        {
            Department.Pressed = true;
            return;
        }
        // End Frontier: global override

        foreach (var id in department.Roles)
        {
            // only request to whitelist roles that aren't already whitelisted, and vice versa - Frontier: roles must be whitelisted
            if (whitelists.Contains(id) != Department.Pressed && proto.Index(id).Whitelisted)
                OnSetJob?.Invoke(id, Department.Pressed);
        }
    }
    // End Frontier
}
