- type: entity
  parent: BaseItem
  id: DrinkKegBase
  name: keg
  abstract: true
  description: I don't have a drinking problem - the keg solved it.
  components:
  - type: Sprite
    sprite: _NF/Objects/Consumable/Drinks/keg_steel.rsi
    state: icon
    layers:
    - state: icon
      map: ["enum.OpenableVisuals.Layer"]
    - state: paper
      map: ["enum.PaperLabelVisuals.Layer"]
  - type: Item
    size: Huge
  - type: Clothing
    sprite: _NF/Objects/Consumable/Drinks/keg_steel.rsi
    quickEquip: false
    slots:
    - Back
  - type: StaticPrice
    price: 30
  - type: SolutionContainerManager
    solutions:
      drink:
        maxVol: 600
  - type: Drink
  - type: DrawableSolution
    solution: drink
  - type: RefillableSolution
    solution: drink
  - type: DrainableSolution
    solution: drink
  - type: SolutionTransfer
    transferAmount: 50
    maxTransferAmount: 100
    minTransferAmount: 10
    canChangeTransferAmount: true
  - type: Spillable
    solution: drink
  - type: UserInterface
    interfaces:
      enum.TransferAmountUiKey.Key:
        type: TransferAmountBoundUserInterface
  - type: GenericVisualizer
    visuals:
      enum.OpenableVisuals.Opened:
        enum.OpenableVisuals.Layer:
          True: { state: "icon_open" }
          False: { state: "icon" }
      enum.PaperLabelVisuals.HasLabel:
        enum.PaperLabelVisuals.Layer:
          True: { visible: true }
          False: { visible: false }
      enum.PaperLabelVisuals.LabelType:
        enum.PaperLabelVisuals.Layer:
          Paper: { state: paper }
          Bounty: { state: paper }
          CaptainsPaper: { state: paper }
          Invoice: { state: paper }
  - type: PaperLabel
    labelSlot:
      insertVerbText: Attach Label
      ejectVerbText: Remove Label
      whitelist:
        components:
        - Paper
  - type: Appearance
  - type: Openable
    sound:
      collection: bottleOpenSounds
    closeable: true
    closeSound:
      collection: bottleCloseSounds
  - type: Sealable
  - type: MultiHandedItem
  - type: ItemSlots
  - type: ContainerContainer
    containers:
      paper_label: !type:ContainerSlot

- type: entity
  parent: DrinkKegBase
  id: DrinkKegSteel
  suffix: Steel
  components:
  - type: Sprite
    sprite: _NF/Objects/Consumable/Drinks/keg_steel.rsi
  - type: Clothing
    sprite: _NF/Objects/Consumable/Drinks/keg_steel.rsi
  - type: PhysicalComposition
    materialComposition:
      Steel: 150

- type: entity
  parent: DrinkKegBase
  id: DrinkKegWood
  suffix: Wood
  components:
  - type: Sprite
    sprite: _NF/Objects/Consumable/Drinks/keg_wood.rsi
  - type: Clothing
    sprite: _NF/Objects/Consumable/Drinks/keg_wood.rsi
  - type: PhysicalComposition
    materialComposition:
      Wood: 150

- type: entity
  parent: DrinkKegBase
  id: DrinkKegPlastic
  suffix: Plastic
  components:
  - type: Sprite
    sprite: _NF/Objects/Consumable/Drinks/keg_plastic.rsi
    layers:
    - state: icon
    - state: keg-alpha-6
      map: ["enum.SolutionContainerLayers.Fill"]
    - state: stopper
      visible: true
      map: ["enum.OpenableVisuals.Layer"]
    - state: paper
      map: ["enum.PaperLabelVisuals.Layer"]
      visible: true
  - type: Clothing
    sprite: _NF/Objects/Consumable/Drinks/keg_plastic.rsi
  - type: PhysicalComposition
    materialComposition:
      Plastic: 150
  - type: SolutionContainerVisuals
    maxFillLevels: 6
    fillBaseName: keg-alpha-
  - type: GenericVisualizer
    visuals:
      enum.OpenableVisuals.Opened:
        enum.OpenableVisuals.Layer:
          True: { visible: false }
          False: { visible: true }
      enum.PaperLabelVisuals.HasLabel:
        enum.PaperLabelVisuals.Layer:
          True: { visible: true }
          False: { visible: false }
      enum.PaperLabelVisuals.LabelType:
        enum.PaperLabelVisuals.Layer:
          Paper: { state: paper }
          Bounty: { state: paper }
          CaptainsPaper: { state: paper }
          Invoice: { state: paper }
